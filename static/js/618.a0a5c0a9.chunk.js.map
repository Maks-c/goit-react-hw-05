{"version":3,"file":"static/js/618.a0a5c0a9.chunk.js","mappings":"8QAEaA,EAAYC,EAAAA,GAAAA,IAAH,yFAOTC,EAAoBD,EAAAA,GAAAA,GAAH,8NAWjBE,EAAwBF,EAAAA,GAAAA,GAAH,2SAcrBG,EAAwBH,EAAAA,GAAAA,IAAH,gE,4BC7BrBI,EAAW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAACR,EAAD,WACE,6BACE,yCACA,SAACE,EAAD,UACGI,EAAMG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAd,OACT,SAACT,EAAD,WACE,UAAC,KAAD,CAAMU,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMR,GAAYS,MAAO,CAAEC,eAAgB,QAA/E,WACE,SAACb,EAAD,CAAuBc,IAAG,yCAAoCN,GAAeO,IAAKR,KAClF,uBAAIA,QAHoBD,c,UCR3BU,EAAW,WAEtB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOf,EAAP,KAAcgB,EAAd,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,6FACED,GAAW,GADb,mBAGwBE,EAAAA,EAAAA,MAHxB,OAGUpB,EAHV,OAIUqB,EAASrB,EAAMG,KAAI,kBAA+B,CAACC,GAAhC,EAAEA,GAAkCC,MAApC,EAAMA,MAAqCC,YAA3C,EAAaA,gBACtCU,EAASK,GALb,yEAQIH,GAAW,GARf,6EADc,uBAAC,WAAD,wBAadI,KACC,KAGD,gCACGL,ICzBE,SAAC,KAAD,KD0BH,SAAClB,EAAD,CAAUC,MAAOA,S,0ME1BjBuB,EAAU,mCAEhBC,IAAAA,SAAAA,QAAA,UAHiB,gCAKV,IAAMJ,EAAS,mCAAG,oGACAI,IAAAA,IAAA,uCAA0CD,IAD1C,cACjBE,EADiB,yBAEhBA,EAASC,KAAKC,SAFE,2CAAH,qDAKTC,EAAY,mCAAG,WAAOxB,GAAP,uFACHoB,IAAAA,IAAA,iBAAoBpB,EAApB,oBAAkCmB,EAAlC,oBADG,cACpBE,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKZG,EAAY,mCAAG,WAAOzB,GAAP,uFACHoB,IAAAA,IAAA,iBAAoBpB,EAApB,4BAA0CmB,EAA1C,oBADG,cACpBE,EADoB,yBAEnBA,EAASC,KAAKI,MAFK,2CAAH,sDAKZC,EAAU,mCAAG,WAAO3B,GAAP,uFACDoB,IAAAA,IAAA,iBAAoBpB,EAApB,4BAA0CmB,EAA1C,oBADC,cAClBE,EADkB,yBAEjBA,EAASC,KAAKC,SAFG,2CAAH,sDAMVK,EAAa,mCAAG,WAAOC,GAAP,uFAEJT,IAAAA,IAAA,gCAAmCD,EAAnC,kBAAoDU,EAApD,yBAFI,cAErBR,EAFqB,yBAGpBA,EAASC,KAAKC,SAHM,2CAAH","sources":["components/MainPage/MainPageStyle.jsx","components/MainPage/MainPage.jsx","pages/HomePage.jsx","components/Loader/Loader.jsx","services/moviesApi.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 1200px;\n  margin-right: auto;\n  margin-left: auto;\n\n`;\n\nexport const ImageGalleryStyle = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin: 0 auto 0 auto;\n  padding: 0;\n  list-style: none;\n`;\n\n\nexport const ImageGalleryItemStyle = styled.li`\n  border-radius: 2px;\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2),\n  0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12);\n\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover {\n    Transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n\n\nexport const ImageGalleryItemImage = styled.img`\n  width: 100%;\n  object-fit: cover;\n\n`;\n\n\n","import React from 'react';\nimport { ImageGalleryStyle, ImageGalleryItemImage, ImageGalleryItemStyle, Container } from './MainPageStyle';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const MainPage = ({ items }) => {\n  const location = useLocation();\n  return (\n    <Container>\n      <main>\n        <h1>List Movies</h1>\n        <ImageGalleryStyle>\n          {items.map(({ id, title, poster_path }) =>\n            <ImageGalleryItemStyle key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }} style={{ textDecoration: 'none' }}>\n                <ImageGalleryItemImage src={`https://image.tmdb.org/t/p/w200${poster_path}`} alt={title} />\n                <p>{title}</p>\n              </Link>\n            </ImageGalleryItemStyle>)}\n        </ImageGalleryStyle>\n\n      </main>\n    </Container>\n  );\n};\n\nMainPage.propTypes={\n  items:PropTypes.array.isRequired\n}\n","import {useEffect, useState} from 'react';\nimport {getMovies} from \"../services/moviesApi\";\nimport {MainPage} from \"../components/MainPage/MainPage\";\nimport {Loader} from \"../components/Loader/Loader\";\n\nexport const HomePage = () => {\n\n  const [items, setItems] = useState([])\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    async function fetchItems(){\n      setLoading(true);\n      try{\n        const items = await getMovies();\n        const movies = items.map(({id, title, poster_path}) => ({id, title, poster_path}))\n        setItems(movies);\n      } catch (error){\n      } finally{\n        setLoading(false);\n      }\n    }\n\n    fetchItems();\n  }, [])\n\n  return (\n    <>\n      {loading && Loader()}\n      <MainPage items={items}/>\n    </>\n  );\n};\n\n","import {ThreeCircles} from \"react-loader-spinner\";\n\nexport const Loader=()=>{\n  return <ThreeCircles/>\n}\n","import axios from \"axios\";\n\nconst BASE_URL = 'https://api.themoviedb.org/3'\nconst API_KEY = '6db178e9ee32ba259e031d27905cafe1'\n\naxios.defaults.baseURL = `${BASE_URL}`;\n\nexport const getMovies = async () => {\n  const response = await axios.get(`/trending/movie/week?api_key=${API_KEY}`);\n  return response.data.results\n}\n\nexport const getMovieById = async (id) => {\n  const response = await axios.get(`/movie/${id}?api_key=${API_KEY}&language=en-US`)\n  return response.data\n}\n\nexport const getMovieCast = async (id) => {\n  const response = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}&language=en-US`)\n  return response.data.cast\n}\n\nexport const getReviews = async (id) => {\n  const response = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`)\n  return response.data.results\n}\n\n\nexport const getFoundMovie = async (query) => {\n\n  const response = await axios.get(`/search/movie?api_key=${API_KEY}&query=${query}&include_adult=false`)\n  return response.data.results\n}\n\n\n\n"],"names":["Container","styled","ImageGalleryStyle","ImageGalleryItemStyle","ImageGalleryItemImage","MainPage","items","location","useLocation","map","id","title","poster_path","to","state","from","style","textDecoration","src","alt","HomePage","useState","setItems","loading","setLoading","useEffect","getMovies","movies","fetchItems","API_KEY","axios","response","data","results","getMovieById","getMovieCast","cast","getReviews","getFoundMovie","query"],"sourceRoot":""}